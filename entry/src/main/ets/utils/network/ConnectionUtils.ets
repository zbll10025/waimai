import { connection } from '@kit.NetworkKit';
import { BusinessError } from '@kit.BasicServicesKit';
import { promptAction } from '@kit.ArkUI';
import { hilog } from '@kit.PerformanceAnalysisKit';

const TAG: string = 'ConnectionUtils';

export class ConnectionUtils {
  //获取网络对象
  netConnection = connection.createNetConnection();

   async isNetworkConnected(): Promise<boolean> {
    let result: boolean = false;
    await connection.getDefaultNet().then(async (data: connection.NetHandle) => {
      if (data.netId === 0) {
        hilog.info(0x0000, TAG, 'network error');
        return;
      }
      await connection.getNetCapabilities(data).then(
        (data: connection.NetCapabilities) => {
          let bearerTypes: Set<number> = new Set(data.bearerTypes);
          let bearerTypesNum = Array.from(bearerTypes.values());
          for (let item of bearerTypesNum) {
            if (item === 0) {
              result = true;
              hilog.info(0x0000, TAG, 'BEARER_CELLULAR');
            } else if (item === 1) {
              result = true;
              hilog.info(0x0000, TAG, 'BEARER_WIFI');
            } else if (item === 3) {
              result = true;
              hilog.info(0x0000, TAG, 'BEARER_ETHERNET');
            } else {
              return;
            }
          }
        })
     })
    return result;
  }


  //订阅网络
  openRegister() {
    this.netConnection.register((error: BusinessError) => {
      hilog.info(0x0000, TAG, JSON.stringify(error));
    });
  }

  //监听网络
  registerNetworkAvailableStatus() {
    this.netConnection.on('netAvailable', () => {
      promptAction.showToast({
        message: '网络可用',
        duration: 2000
      });
    });

    this.netConnection.on('netUnavailable', () => {
      promptAction.showToast({
        message: '网络不可用',
        duration: 2000
      });
    });

    this.netConnection.on('netLost', () => {
      promptAction.showToast({
        message: '网络丢失',
        duration: 2000
      });
    });
  }

  //取消订阅
  closeRegister() {
    this.netConnection.unregister((error: BusinessError) => {
      hilog.info(0x0000, TAG, JSON.stringify(error));
    });
  }
}

export default new ConnectionUtils();